#include <fstream>
#include <math.h>
#include <uWS/uWS.h>
#include <chrono>
#include <iostream>
#include <thread>
#include <vector>
#include "Eigen-3.3/Eigen/Core"
#include "Eigen-3.3/Eigen/QR"
#include "json.hpp"
#include "trajectories.h"
#include "spline.h"
#include "constants.h"

using namespace std;

// for convenience
using json = nlohmann::json;

// For converting back and forth between radians and degrees.
constexpr double pi() { return M_PI; }
double deg2rad(double x) { return x * pi() / 180; }
double rad2deg(double x) { return x * 180 / pi(); }

// Checks if the SocketIO event has JSON data.
// If there is data the JSON object in string format will be returned,
// else the empty string "" will be returned.
string hasData(string s) {
  auto found_null = s.find("null");
  auto b1 = s.find_first_of("[");
  auto b2 = s.find_first_of("}");
  if (found_null != string::npos) {
    return "";
  } else if (b1 != string::npos && b2 != string::npos) {
    return s.substr(b1, b2 - b1 + 2);
  }
  return "";
}

double distance(double x1, double y1, double x2, double y2)
{
	return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
}
int ClosestWaypoint(double x, double y, vector<double> maps_x, vector<double> maps_y)
{

	double closestLen = 100000; //large number
	int closestWaypoint = 0;

	for(int i = 0; i < maps_x.size(); i++)
	{
		double map_x = maps_x[i];
		double map_y = maps_y[i];
		double dist = distance(x,y,map_x,map_y);
		if(dist < closestLen)
		{
			closestLen = dist;
			closestWaypoint = i;
		}

	}

	return closestWaypoint;

}

int NextWaypoint(double x, double y, double theta, vector<double> maps_x, vector<double> maps_y)
{

	int closestWaypoint = ClosestWaypoint(x,y,maps_x,maps_y);

	double map_x = maps_x[closestWaypoint];
	double map_y = maps_y[closestWaypoint];

	double heading = atan2( (map_y-y),(map_x-x) );

	double angle = abs(theta-heading);

	if(angle > pi()/4)
	{
		closestWaypoint++;
	}

	return closestWaypoint;

}

// Transform from Cartesian x,y coordinates to Frenet s,d coordinates
vector<double> getFrenet(double x, double y, double theta, vector<double> maps_x, vector<double> maps_y)
{
	int next_wp = NextWaypoint(x,y, theta, maps_x,maps_y);

	int prev_wp;
	prev_wp = next_wp-1;
	if(next_wp == 0)
	{
		prev_wp  = maps_x.size()-1;
	}

	double n_x = maps_x[next_wp]-maps_x[prev_wp];
	double n_y = maps_y[next_wp]-maps_y[prev_wp];
	double x_x = x - maps_x[prev_wp];
	double x_y = y - maps_y[prev_wp];

	// find the projection of x onto n
	double proj_norm = (x_x*n_x+x_y*n_y)/(n_x*n_x+n_y*n_y);
	double proj_x = proj_norm*n_x;
	double proj_y = proj_norm*n_y;

	double frenet_d = distance(x_x,x_y,proj_x,proj_y);

	//see if d value is positive or negative by comparing it to a center point

	double center_x = 1000-maps_x[prev_wp];
	double center_y = 2000-maps_y[prev_wp];
	double centerToPos = distance(center_x,center_y,x_x,x_y);
	double centerToRef = distance(center_x,center_y,proj_x,proj_y);

	if(centerToPos <= centerToRef)
	{
		frenet_d *= -1;
	}

	// calculate s value
	double frenet_s = 0;
	for(int i = 0; i < prev_wp; i++)
	{
		frenet_s += distance(maps_x[i],maps_y[i],maps_x[i+1],maps_y[i+1]);
	}

	frenet_s += distance(0,0,proj_x,proj_y);

	return {frenet_s,frenet_d};

}

// Transform from Cartesian x,y coordinates to Frenet s,d coordinates
vector<double> getFrenetSpeed(double x, double y, double theta, double speed, vector<double> maps_x, vector<double> maps_y, vector<double> maps_dx, vector<double> maps_dy)
{
	int next_wp = NextWaypoint(x,y, theta, maps_x,maps_y);

	int prev_wp;
	prev_wp = next_wp-1;
	if(next_wp == 0)
	{
		prev_wp  = maps_x.size()-1;
	}

	double prev_yaw_d = atan2(maps_dy[prev_wp],maps_dx[prev_wp]);
  double next_yaw_d = atan2(maps_dy[next_wp],maps_dx[next_wp]);

  double prev_dist = distance(x,y,maps_x[prev_wp],maps_y[prev_wp]);
  double next_dist = distance(x,y,maps_x[next_wp],maps_y[next_wp]);

  double yaw_d = prev_yaw_d + (next_yaw_d-prev_yaw_d)*prev_dist/(prev_dist+next_dist);
  double yaw_s = yaw_d + pi()/2;

  double d_dot = speed * cos(theta - yaw_d);
  double s_dot = speed * cos(theta - yaw_s);

	return {s_dot,d_dot};
}


// Transform from Frenet s,d coordinates to Cartesian x,y
vector<double> getXY(double s, double d, vector<double> maps_s, vector<double> maps_x, vector<double> maps_y)
{
	int prev_wp = -1;

	while(s > maps_s[prev_wp+1] && (prev_wp < (int)(maps_s.size()-1) ))
	{
		prev_wp++;
	}

	int wp2 = (prev_wp+1)%maps_x.size();

	double heading = atan2((maps_y[wp2]-maps_y[prev_wp]),(maps_x[wp2]-maps_x[prev_wp]));
	// the x,y,s along the segment
	double seg_s = (s-maps_s[prev_wp]);

	double seg_x = maps_x[prev_wp]+seg_s*cos(heading);
	double seg_y = maps_y[prev_wp]+seg_s*sin(heading);

	double perp_heading = heading-pi()/2;

	double x = seg_x + d*cos(perp_heading);
	double y = seg_y + d*sin(perp_heading);

	return {x,y};

}

// Transform from Frenet s,d coordinates to Cartesian x,y
vector<double> getXYspline(double s, double d, vector<double> maps_s, vector<double> maps_x, vector<double> maps_y)
{
	int prev_wp = -1;

	while(s > maps_s[prev_wp+1] && (prev_wp < (int)(maps_s.size()-1) ))
	{
		prev_wp++;
	}

	int wp0 = (prev_wp-2)%maps_x.size();
  int wp1 = (prev_wp-1)%maps_x.size();
  int wp2 = prev_wp;
  int wp3 = (prev_wp+1)%maps_x.size();
  int wp4 = (prev_wp+2)%maps_x.size();
  int wp5 = (prev_wp+3)%maps_x.size();

	double heading01 = atan2((maps_y[wp1]-maps_y[wp0]),(maps_x[wp1]-maps_x[wp0]));
  double heading12 = atan2((maps_y[wp2]-maps_y[wp1]),(maps_x[wp2]-maps_x[wp1]));
  double heading23 = atan2((maps_y[wp3]-maps_y[wp2]),(maps_x[wp3]-maps_x[wp2]));
  double heading34 = atan2((maps_y[wp4]-maps_y[wp3]),(maps_x[wp4]-maps_x[wp3]));
  double heading45 = atan2((maps_y[wp5]-maps_y[wp4]),(maps_x[wp5]-maps_x[wp4]));

  double perp_heading1 = (heading01 + heading12)/2 -pi()/2;
  double perp_heading2 = (heading12 + heading23)/2 -pi()/2;
  double perp_heading3 = (heading23 + heading34)/2 -pi()/2;
  double perp_heading4 = (heading34 + heading45)/2 -pi()/2;

  vector<double> ptsx;
  vector<double> ptsy;

  vector<double> rtptsx;
  vector<double> rtptsy;

  ptsx.push_back(maps_x[wp1] + d*cos(perp_heading1));
  ptsx.push_back(maps_x[wp2] + d*cos(perp_heading2));
  ptsx.push_back(maps_x[wp3] + d*cos(perp_heading3));
  ptsx.push_back(maps_x[wp4] + d*cos(perp_heading4));

  ptsy.push_back(maps_y[wp1] + d*sin(perp_heading1));
  ptsy.push_back(maps_y[wp2] + d*sin(perp_heading2));
  ptsy.push_back(maps_y[wp3] + d*sin(perp_heading3));
  ptsy.push_back(maps_y[wp4] + d*sin(perp_heading4));

  double ref_x = maps_x[wp2];
  double ref_y = maps_y[wp2];
  double ref_heading  = (heading12 + heading23)/2;

  for(int i=0; i<ptsx.size(); i++)
  {
    ptsx[i] -= ref_x;
    ptsy[i] -= ref_y;

    rtptsx.push_back(ptsx[i]*cos(-ref_heading) - ptsy[i] * sin(-ref_heading));
    rtptsy.push_back(ptsx[i]*sin(-ref_heading) + ptsy[i] * cos(-ref_heading));
  }

  tk::spline my_s;
  my_s.set_points(rtptsx, rtptsy);

  double t_x = (rtptsx[2]-rtptsx[1]) * (s-maps_s[wp2])/(maps_s[wp3]-maps_s[wp2]);
  double t_y = my_s(t_x);

  double p_x = t_x * cos(ref_heading) - t_y * sin(ref_heading);
  double p_y = t_x * sin(ref_heading) + t_y * cos(ref_heading);

	return {p_x + ref_x,p_y + ref_y};
}

int main() {
  uWS::Hub h;

  // Load up map values for waypoint's x,y,s and d normalized normal vectors
  vector<double> map_waypoints_x;
  vector<double> map_waypoints_y;
  vector<double> map_waypoints_s;
  vector<double> map_waypoints_dx;
  vector<double> map_waypoints_dy;

  // Waypoint map to read from
  string map_file_ = "../data/highway_map.csv";
  // The max s value before wrapping around the track back to 0
  double max_s = 6945.554;

  ifstream in_map_(map_file_.c_str(), ifstream::in);

  string line;
  while (getline(in_map_, line)) {
  	istringstream iss(line);
  	double x;
  	double y;
  	float s;
  	float d_x;
  	float d_y;
  	iss >> x;
  	iss >> y;
  	iss >> s;
  	iss >> d_x;
  	iss >> d_y;
  	map_waypoints_x.push_back(x);
  	map_waypoints_y.push_back(y);
  	map_waypoints_s.push_back(s);
  	map_waypoints_dx.push_back(d_x);
  	map_waypoints_dy.push_back(d_y);
  }

  h.onMessage([&map_waypoints_x,&map_waypoints_y,&map_waypoints_s,&map_waypoints_dx,&map_waypoints_dy](uWS::WebSocket<uWS::SERVER> ws, char *data, size_t length,
                     uWS::OpCode opCode) {
    // "42" at the start of the message means there's a websocket message event.
    // The 4 signifies a websocket message
    // The 2 signifies a websocket event
    //auto sdata = string(data).substr(0, length);
    //cout << sdata << endl;
    if (length && length > 2 && data[0] == '4' && data[1] == '2') {

      auto s = hasData(data);

      if (s != "") {
        auto j = json::parse(s);

        string event = j[0].get<string>();

        if (event == "telemetry") {
          // j[1] is the data JSON object

        	// Main car's localization Data
          	double car_x = j[1]["x"];
          	double car_y = j[1]["y"];
          	double car_s = j[1]["s"];
          	double car_d = j[1]["d"];
          	double car_yaw = j[1]["yaw"];
          	double car_speed = j[1]["speed"];
            double car_acc = 0;

          	// Previous path data given to the Planner
          	auto previous_path_x = j[1]["previous_path_x"];
          	auto previous_path_y = j[1]["previous_path_y"];
          	// Previous path's end s and d values
          	double end_path_s = j[1]["end_path_s"];
          	double end_path_d = j[1]["end_path_d"];

          	// Sensor Fusion Data, a list of all other cars on the same side of the road.
            // The data format for each car is:
            // [ id, x, y, vx, vy, s, d].
            // The id is a unique identifier for that car.
            // The x, y values are in global map coordinates,
            // and the vx, vy values are the velocity components,
            // also in reference to the global map.
            // Finally s and d are the Frenet coordinates for that car.
          	auto sensor_fusion = j[1]["sensor_fusion"];
            car_yaw = deg2rad(car_yaw);
            car_speed *= 0.44704;
          	json msgJson;

            // TODO: prepare data for ego
            vector<double> ego_state;
            int previous_size = previous_path_x.size();
            //take maximum of 5 states...we are giving ourselves a maximum of 100ms
            //to reply with new trajectory

            double elapsed_time = 0;

            if(previous_size > 2){//no data, we just have position and speed
              elapsed_time = previous_size * 0.02;

              double path_x_0 = previous_path_x[previous_size-3];
              double path_y_0 = previous_path_y[previous_size-3];
              double path_x_1 = previous_path_x[previous_size-2];
              double path_y_1 = previous_path_y[previous_size-2];
              double path_x_2 = previous_path_x[previous_size-1];
              double path_y_2 = previous_path_y[previous_size-1];

              double path_yaw_1 = atan2(path_y_1-path_y_0,path_x_1-path_x_0);
              double path_distance_1 = sqrt(pow(path_x_1-path_x_0,2)+pow(path_y_1-path_y_0,2));
              double path_speed_1 = path_distance_1 / 0.02;

              double path_yaw_2 = atan2(path_y_2-path_y_1,path_x_2-path_x_1);
              double path_distance_2 = sqrt(pow(path_x_2-path_x_1,2)+pow(path_y_2-path_y_1,2));
              double path_speed_2 = path_distance_2 / 0.02;

              car_x = path_x_2;
              car_y = path_y_2;
              car_yaw = path_yaw_2;
              vector<double> car_frenet = getFrenet(car_x,car_y,car_yaw,map_waypoints_x,map_waypoints_y);
              car_s = car_frenet[0];
              car_d = car_frenet[1];
              car_speed = path_speed_2;
              car_acc = (path_speed_2 - path_speed_1) / 0.02;
            }
            //cout << car_speed << endl;

            // TODO: Prepare telemetry data by sending all
            // variables in frenet reference.
            // id, s, s_d, d, d_d
            vector<vector<double> > sensors;
            for(int i=0; i<sensor_fusion.size(); i++){
              double other_car_vx = sensor_fusion[i][3];
              double other_car_vy = sensor_fusion[i][4];

              double other_car_x = sensor_fusion[i][1];
              //other_car_x += 0.02 * other_car_vx * previous_to_copy;
              double other_car_y = sensor_fusion[i][2];
              //other_car_y += 0.02 * other_car_vy * previous_to_copy;
              double other_car_speed = sqrt(other_car_vx*other_car_vx+other_car_vy*other_car_vy);
              double other_car_yaw = atan2(other_car_vy,other_car_vx);

              vector<double> other_car_frenet = getFrenet(other_car_x,
              other_car_y,other_car_yaw,map_waypoints_x,map_waypoints_y);

              other_car_frenet[0] += other_car_speed * elapsed_time;

              //vector<double> other_car_frenet_speed = getFrenetSpeed(other_car_x,
              //other_car_y,other_car_yaw,other_car_speed,map_waypoints_x,map_waypoints_y,
              //map_waypoints_dx,map_waypoints_dy);

              vector<double> other_car_sensors = {sensor_fusion[i][0],
                other_car_frenet[0],other_car_speed,
                other_car_frenet[1]};
              sensors.push_back(other_car_sensors);
            }

            // pathplanner ego;
            //
            // ego.update_telemetry(ego_state, sensors);
            // ego.update_state();
            // ego.set_goal();
            // ego.get_trajectory();
            int i_nearest = -1;
            double s_nearest = 6945.554;
            int car_lane = car_d/4;

            for(int i=0; i<sensors.size(); i++)
            {
              //cout << "Other car in lane " << (sensors[i][3]/4 << endl;
              if(int(sensors[i][3])/4 == car_lane){
                //cout << "Car in my lane" << endl;
                double s_diff = sensors[i][1] - car_s;
                if(s_diff<0) s_diff += 6945.554;
                if(s_diff<s_nearest){
                  s_nearest=s_diff;
                  i_nearest=i;
                }
              }
            }

            //if(i_nearest!=-1) cout << "My lane: "<< car_lane <<". Car " << i_nearest << " ahead by " << s_nearest << " speed " << sensors[i_nearest][2] << endl;

            // TODO: define a path made up of (x,y) points that the car will visit sequentially every .02 seconds
            vector<double> next_x_vals;
          	vector<double> next_y_vals;

            for(int i=0; i<previous_path_x.size(); i++)
            {
              next_x_vals.push_back(previous_path_x[i]);
              next_y_vals.push_back(previous_path_y[i]);
            }

            //if(previous_path_x.size() < 25){
              double goal_s;
              double goal_s_d;
              double goal_s_dd;
              double goal_d;
              double goal_d_d;
              double goal_d_dd;
              double t_traj;
              goal_d = car_lane * 4.0 + 2.0;
              goal_d_d = 0;
              goal_d_dd = 0;

              //if(i_nearest == -1 or s_nearest/v_max > 10.0){
                double t_acc = fabs(v_max-car_speed) / a_max;
                int sign = 1;
                if(v_max<car_speed) sign = -1;
                if(t_acc > 5){
                  goal_s = car_s + (car_speed + sign * 0.5 * a_max * t_acc) * t_acc;
                  goal_s_d = v_max;
                  goal_s_dd = 0;
                  t_traj = t_acc;
                }else{
                  goal_s = car_s + (car_speed + sign * 0.5 * a_max * t_acc) * t_acc + v_max * (5-t_acc);
                  goal_s_d = v_max;
                  goal_s_dd = 0;
                  t_traj = 5;
                }
                cout << "Driving from " << car_speed << " up to " << goal_s_d << " for " << t_traj << " seconds. Recovered " << previous_path_x.size() << " points." << endl;
                cout << "INIT s: " << car_s << " s_d: " << car_speed << " s_dd: " << car_acc << endl;
                cout << "GOAL s: " << goal_s << " s_d: " << goal_s_d << " s_dd: " << goal_s_dd << endl;
              /*}else{
                double t_acc = (sensors[i_nearest][2]-car_speed) / a_max;
                int sign = 1;
                if(sensors[i_nearest][2]<car_speed) sign = -1;

                if(t_acc > 1){
                  goal_s = car_s + (car_speed + sign * 0.5 * a_max * t_acc) * t_acc;
                  goal_s_d = sensors[i_nearest][2];
                  goal_s_dd = 0;
                  t_traj = t_acc;
                }else{
                  goal_s = car_s + (car_speed + sign * 0.5 * a_max * t_acc) * t_acc + sensors[i_nearest][2] * (1-t_acc);
                  goal_s_d = sensors[i_nearest][2];
                  goal_s_dd = 0;
                  t_traj = 1;
                }
                cout << "Driving behind from " << car_speed << " up to " << goal_s_d << " for " << t_traj << " seconds" << endl;

                //INVADE SECURITY?===
                double prediction_s = sensors[i_nearest][1] + sensors[i_nearest][2]*t_traj;
                double safety_s = safety_seconds * sensors[i_nearest][2];
                double max_s = prediction_s - safety_s;
                if(prediction_s > s_max) prediction_s -= s_max;
                if(max_s > s_max) max_s -= s_max;
                if(max_s < 0) max_s+=s_max;
                if(goal_s > s_max) goal_s -= s_max;

                if(max_s > car_s){
                  if(goal_s > max_s or goal_s < car_s){
                    goal_s = max_s;
                    cout << "Invasion" << endl;
                  }
                }else{
                  if(goal_s > max_s and goal_s < car_s){
                    goal_s = max_s + s_max;
                    cout << "Invasion" << endl;
                  }
                }
              }*/

              trajectory traj_s;
              trajectory traj_d;

              traj_s.set({car_s,car_speed,car_acc}, {goal_s,goal_s_d,goal_s_dd}, t_traj);
              traj_d.set({car_d,0,0}, {goal_d,goal_d_d,goal_d_dd}, t_traj);

              traj_s.solve();
              traj_d.solve();

              vector<double> ptsx;
              vector<double> ptsy;
              //ptsx.push_back(-1);
              //ptsy.push_back(0);

              ptsx.push_back(0);
              ptsy.push_back(0);
              cout << "Trajectory s: "<< car_s<<" d: "<<car_d << " x: " << car_x << " y: " << car_y << " PTSX: " << ptsx[ptsx.size()-1] << " PTSY: " << ptsy[ptsy.size()-1] << endl;

              int n_points_spline = 5;
              for(int i=1; i<n_points_spline; i++){
                double next_s = traj_s.get_point(t_traj*i/(n_points_spline-1));
                double next_d = traj_d.get_point(t_traj*i/(n_points_spline-1));
                if(next_s>s_max) next_s-=s_max;
                vector<double> next_point = getXY(next_s,next_d, map_waypoints_s, map_waypoints_x, map_waypoints_y);
                next_point[0] -= car_x;
                next_point[1] -= car_y;
                ptsx.push_back(next_point[0]*cos(-car_yaw) - next_point[1] * sin (-car_yaw));
                ptsy.push_back(next_point[0]*sin(-car_yaw) + next_point[1] * cos (-car_yaw));
                cout << "Trajectory s: "<< next_s <<" d: "<<next_d << " x: " << next_point[0]+car_x << " y: " << next_point[1]+car_y << " PTSX: " << ptsx[ptsx.size()-1] << " PTSY: " << ptsy[ptsy.size()-1] << endl;
              }

              /*for(int i=0; i<ptsx.size(); i++){
                cout << ptsx[i] << " " << ptsy[i] << endl;
              }*/

              tk::spline s;
              s.set_points(ptsx,ptsy);

              vector<double> distances;
              while(distances.size()<(50-previous_path_x.size())){
                distances.push_back(ptsx[n_points_spline-1]*(traj_s.get_point((distances.size()+1)*0.02)-car_s)/(goal_s-car_s));
                cout << "Distances: " << distances[distances.size()-1] << "PTSX MAX: " << ptsx[n_points_spline-1] << " traj_s: " << traj_s.get_point((distances.size()+1)*0.02) << endl;
              }

              for(int i=0; i<ptsx.size(); i++) cout << "PTSX: " << ptsx[i] << endl;
//              for(int i=0; i<distances.size(); i++) cout << "Distances: " << ptsx[i] << endl;

              for(int i=0; i<distances.size(); i++)
              {
                double next_x = distances[i];
                double next_y = s(next_x);
                next_x_vals.push_back(next_x*cos(car_yaw) - next_y * sin (car_yaw)+car_x);
                next_y_vals.push_back(next_x*sin(car_yaw) + next_y * cos (car_yaw)+car_y);
              }

              for(int i=1; i<next_x_vals.size(); i++){
                double last_diff_x = next_x_vals[i]-next_x_vals[i-1];
                double last_diff_y = next_y_vals[i]-next_y_vals[i-1];
                double last_speed = sqrt(pow(last_diff_x,2)+pow(last_diff_y,2))/0.02;
                cout << i << " speed: " << last_speed << endl;
              }

/*              double last_diff_x = next_x_vals[next_x_vals.size()-1]-next_x_vals[next_x_vals.size()-2];
              double last_diff_y = next_y_vals[next_y_vals.size()-1]-next_y_vals[next_y_vals.size()-2];
              double last_speed = sqrt(pow(last_diff_x,2)+pow(last_diff_y,2))/0.02;
              cout << "Last speed: " << last_speed << endl;*/

            //}

            // for(int i=0; i<previous_path_x.size(); i++)
            // {
            //   next_x_vals.push_back(previous_path_x[i]);
            //   next_y_vals.push_back(previous_path_y[i]);
            // }
            // double ref_s = car_s;
            // if(previous_path_x.size()>0) ref_s = end_path_s;
            // for(int i=0; i<(50-previous_path_x.size()); i++)
            // {
            //   vector<double> next_point = getXYspline(ref_s + v_ref / 50 * (i+1), car_lane*4+2.0, map_waypoints_s, map_waypoints_x, map_waypoints_y);
            //   next_x_vals.push_back(next_point[0]);
            //   next_y_vals.push_back(next_point[1]);
            // }





            // //Copy left-over old values
            // for(int i=0; i<previous_to_copy; i++){
            //   next_x_vals.push_back(previous_path_x[i]);
            //   next_y_vals.push_back(previous_path_y[i]);
            // }
            //
            // //Add new ones up to 1 sec
            // for(int i=0; i<50; i++){
            //   if(next_x_vals.size()>=50) break;
            //   vector<double> point_veh = ego.get_point(i*0.02);
            //   vector<double> point_world = getXY(point_veh[0], point_veh[1], map_waypoints_s, map_waypoints_x, map_waypoints_y);
            //
            //   next_x_vals.push_back(point_world[0]);
            //   next_y_vals.push_back(point_world[1]);
            // }
//            cout << sensor_fusion << endl;

          	msgJson["next_x"] = next_x_vals;
          	msgJson["next_y"] = next_y_vals;

          	auto msg = "42[\"control\","+ msgJson.dump()+"]";

          	//this_thread::sleep_for(chrono::milliseconds(1000));
          	ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);

        }
      } else {
        // Manual driving
        std::string msg = "42[\"manual\",{}]";
        ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);
      }
    }
  });

  // We don't need this since we're not using HTTP but if it's removed the
  // program
  // doesn't compile :-(
  h.onHttpRequest([](uWS::HttpResponse *res, uWS::HttpRequest req, char *data,
                     size_t, size_t) {
    const std::string s = "<h1>Hello world!</h1>";
    if (req.getUrl().valueLength == 1) {
      res->end(s.data(), s.length());
    } else {
      // i guess this should be done more gracefully?
      res->end(nullptr, 0);
    }
  });

  h.onConnection([&h](uWS::WebSocket<uWS::SERVER> ws, uWS::HttpRequest req) {
    std::cout << "Connected!!!" << std::endl;
  });

  h.onDisconnection([&h](uWS::WebSocket<uWS::SERVER> ws, int code,
                         char *message, size_t length) {
    ws.close();
    std::cout << "Disconnected" << std::endl;
  });

  int port = 4567;
  if (h.listen(port)) {
    std::cout << "Listening to port " << port << std::endl;
  } else {
    std::cerr << "Failed to listen to port" << std::endl;
    return -1;
  }
  h.run();
}
